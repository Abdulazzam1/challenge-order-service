version: '3.8'

services:
  # 1. Layanan Database (PostgreSQL)
  db:
    image: postgres:14-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: fullstack_challenge
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # === PERBAIKAN 1: Tambahkan Healthcheck untuk DB ===
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d fullstack_challenge"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  # 2. Layanan Caching (Redis)
  cache:
    image: redis:7-alpine
    container_name: cache
    restart: always
    ports:
      - '6379:6379'
    # === PERBAIKAN 2: Tambahkan Healthcheck untuk Redis ===
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  # 3. Layanan Message Broker (RabbitMQ)
  broker:
    image: rabbitmq:3-management-alpine
    container_name: broker
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s

  # 4. Layanan Produk (NestJS)
  product-service:
    container_name: product-service
    build:
      context: ../challenge-product-service
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      db:
        # === PERBAIKAN 3: Tunggu sampai DB 'healthy' ===
        condition: service_healthy
      cache:
        # === PERBAIKAN 4: Tunggu sampai Cache 'healthy' ===
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      DATABASE_URL: 'postgresql://admin:admin@db:5432/fullstack_challenge'
      REDIS_HOST: 'cache'
      REDIS_PORT: 6379
      RABBITMQ_URL: 'amqp://guest:guest@broker:5672'

  # 5. Layanan Order (Go)
  order-service:
    container_name: order-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    depends_on:
      db:
        # === PERBAIKAN 5: Tunggu sampai DB 'healthy' ===
        condition: service_healthy
      cache:
        # === PERBAIKAN 6: Tunggu sampai Cache 'healthy' ===
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      DATABASE_URL: 'postgresql://admin:admin@db:5432/fullstack_challenge'
      REDIS_HOST: 'cache'
      REDIS_PORT: 6379
      RABBITMQ_URL: 'amqp://guest:guest@broker:5672'
      PRODUCT_SERVICE_URL: 'http://product-service:3000'

volumes:
  postgres_data: